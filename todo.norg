* (-) Todo
** (-) Technical
*** command line args
    add args for all the input fields and flags
*** ( ) integrate with neovim
*** tests
    - this is actually very testable
    - come up with scenarios and mock input files
    - probably just test api.go ?
*** (-) fix delay on replacing
    search is pretty fast again, but seems to take a lot of cpu resources
*** ( ) BUG: some matches dont show proper match/replacement indicators
*** ( ) BUG: matches with same filename but different subdirs get grouped
*** ( ) BUG: flickering while typing
    maybe something with the debounce?
*** (x) BUG: replace does nothing
    generally works on first try and subsequent ones with same search term.
    but following scenario generally doesnt work:
    ~ search utils
    ~ replace all one by one with foo
    ~ search foo
    ~ press enter
    *Expected Result:*
    entry is replaced back to "utils"
    *Actual Result:* 
    nothing happens except a toast sometimes

    Fixed
    - The original issue was coming from hardcoded values that were send to go
    - the rest was due to incorrect checks when running replace


*** (x) refactoring
**** (x) frontend
**** (x) response model
     - maybe struct instead of map so we don't have to do mapping in svelte

**** (x) separation of concerns
     - ripgrep should not be handling the match struct
       we need a new module for that

*** (x) debounce all inputs
** (-) Features
*** ( ) pagination
*** ( ) sqlite
*** (x) replace all
*** ( ) make directory a comma separated list as well
*** ( ) remember last inputs
    will get interesting when hooked up to neovim
*** ( ) allow selection of multiple items
    - now we have not only /selected/,but /marked/ and /cursor/ 
      or something like that
    - space to mark
*** (x) undo 
    - keep a stack of replace actions in go
    - actions have an array of replaced lines and their original text
    - push to stack on replace/replace all
    - pop from stack on undo
    - replace with original text

*** ( ) Keyboard first
    make sure everything is fully keyboard navigable
    what does that even mean?
*** (x) search and replace behavior flags
**** (x) highlighting
     - highlighting in regex mode needs to show the matched text not the search term

**** (x) search
     - ignore case
     - regex
     - match whole word
**** (x) replace
     - preserve case
** (-) UI/UX


*** ( ) line context
    what to do on very long lines?
    matched text should always be visible
    in my examples it works fine because lines are generally short,
    but we could think about not always displaying from the start of the line
*** ( ) BUG: daisyui/tailwind catppucin theme  colors not working
*** (x) BUG: highlighting is broken around search term highlight
    use go pkg chroma instead of prism

*** ( ) scroll when selected match is out of viewport
*** (x) create file watchers on current matches
    - when Search runs create new file watcher
    - emit event from go code with entirely new RipgrepResult
    - listen for event in svelte and update results
*** (x) bug: highlighting missing
    1. open page (with "utils" as search)-> highlighting works
    2. type nonsense -> no search results
    3. search for "utils" again -> no highlighting
*** (x) toasts
    - to confirm successful/failed replace action
